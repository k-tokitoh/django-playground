"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-_ltps^9@lct^1k(7y4eoja#&u2$-fduxw&!_mm)6)&l00(!8fk"

# TODO: 望ましくないらしいのでワイルドワードじゃなくしたい
ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "polls.apps.PollsConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    # デフォルトで入っている。各アプリケーション配下などのstaticファイルを配信のために1ヶ所に収集する。
    # 開発用サーバの場合には、収集された結果はサーバのメモリ上に保持され、ディスクには保存されない。
    "django.contrib.staticfiles",
]

# django.contrib.staticfiles の collectstatic コマンドによって収集された static ファイルは、
# 開発用サーバの場合ではそのままstaticファイルを配信するのでサーバのメモリにのる。
# それ以外の場合にはいったんディスクに配置される。そのディスク上の配置先を指定するのが STATIC_ROOT
# よって開発用サーバの場合には、STATIC_ROOT の指定は不要
# ローカルでnginx+gunicorn構成を選択肢として用意しているので、そのケースのためにbase.ymlで設定している
# gunicornは静的ファイルの配信を行わない。なのでcollectstaticによってSTATIC_ROOTに収集し、それをnginxのコンテナにマウントすることでnginxから配信する。
STATIC_ROOT = "static"

STORAGES = {
    "staticfiles": {
        # django.contrib.staticfiles の collectstatic コマンドは、staticファイルを1ヶ所にまとめたうえで、開発用サーバ以外の場合にはディスクに配置する
        # そのディスクへの配置の際にstorage APIを利用するが、どのstorage実装を利用するかを以下で指定する
        # 開発用サーバではそもそもstaticeファイルをディスクに配置しないので、ここの設定は意味がないと思われる
        # ただしローカルでnginx+gunicorn構成を選択肢として用意しているので、そのケースのためにbase.ymlでstorage実装を設定している
        # ManifestStaticFilesStorageは、staticファイルのURLにハッシュ値を付与することでバージョンニングするstorage実装（ただしDEBUG=Falseの場合のみ）
        "BACKEND": "django.contrib.staticfiles.storage.ManifestStaticFilesStorage",
    }
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "wsgi.application"


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
